package ${pacote}.service;

<#if gerarPesquisar>
import java.util.Map;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
</#if>
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ${pacote}.${nome}.entity.${nome}Entity;
import ${pacote}.${nome}.entity.view.${nome}PesquisaView;
import ${pacote}.${nome}.repository.${nome}Repository;
<#if gerarBuscarPorId>
import jakarta.persistence.EntityNotFoundException;
</#if>
import lombok.RequiredArgsConstructor;


@RequiredArgsConstructor
@Transactional(readOnly = true)
@Service
public class ${nome}Service {
  private final ${nome}Repository ${nome}Repository;

<#if gerarSalvar>	
  @Transactional
  public ${nome}Entity salvar(${nome}Entity ${nome}) {
    return ${nome}Repository.save(${nome});
  }
</#if>

<#if gerarDelete>
  @Transactional
  public void deletarPorId(Integer cd${nome}) {
    ${nome}Repository.deleteById(cd${nome});
  }
</#if>

<#if gerarBuscarPorId>
  public ${nome}Entity buscarPorIdOuThrow(Integer cd${nome}) {
    return ${nome}Repository.findById(cd${nome}).orElseThrow(() -> new EntityNotFoundException(
        "${mensagem} não encontrado para o código enviado %s".formatted(cd${nome})));
  }
</#if>

<#if gerarPesquisar>
  public Page<${nome}PesquisaView> pesquisarView(Pageable pageable,
      Map<String, Object> parametros) {
    return ${nome}Repository.search(parametros, pageable);
  }
</#if>  
}
